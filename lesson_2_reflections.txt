What happens when you initialize a repository? Why do you need to do it?

	When you initialize a repository, git creates a ".git" folder that will hold all 
	the commits that you submit to it. You need to do it to have one central folder
	to hold all of the commits.


How is the staging area different from the working directory and the repository?
What value do you think it offers?

	The staging area is different from the working directory and the repository
	by acting as an intermediary "save" location between the working directory (not saved at all)
	and the repo (fully commited). 
	
	The value that it offers is that instead of having
	to commit the whole working directory at once, it lets you pick and choose what files
	to add to the commit.

How can you use the staging area to make sure you have one commit per logical
change?

	You can use the "git status", 'git diff', and 'git diff --staged' commands
	to make sure that there is only one commit per logical change.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
	Making different difficulty setting in games would be a helpful situation
	to use branches. Branches would help this because the minor difference in the 
	mode difficulties would be kept separate but organized and they wouldn't interact
	or affect others.

How do the diagrams help you visualize the branch structure?

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?

